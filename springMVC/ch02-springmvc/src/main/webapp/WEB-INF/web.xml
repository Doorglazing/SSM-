<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--    注册springMVC的核心对象DispatherServlet-->
<!--    需要在tomcat服务器启动后创DispatherServlet实例-->
<!--    为什么要创建DispatherServlet对象的实例呢
       通过DispatherServlet在他创建过程中，会同时创建springmvc容器对象
       读取springmvc的配置文件，吧这个配置文件中的对象都创建好，当用户发起请求
       就可直接使用对象了
       servlet的初始化会执行init()方法.DispatherServlet在init()中
       创建容器 读取配置文件
       WebApplicationContext ctx = new ClassPathXmlApplicationContext("SpringMVC.xml");
       // 把容器对象放入ServletContext中
       getServletContext().setAttribute(key, ctx);


      报错： /WEB-INF/springmvc-servlet.xml
               /WEB-INF/myWeb-servlet.xml
               原因是： springmvc在创建容器对象时
               默认读取的是/WEB-INF/<servlet-name>-servlet.xml
    -->
    <servlet>
        <servlet-name>myWeb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--        自定义springmvc配置文件的位置-->
        <init-param>
            <!--            springmvc的配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--            指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
<!--        在tomcat启动后，创建servlet对象
            load-on-startup: 表示tomcat启动后创建对象的顺序
            它的值士整数，数值越小，tomcat创建对象的时间越早。
            大于等于0的整数
-->
        <load-on-startup>1</load-on-startup>

    </servlet>
    <servlet-mapping>
        <servlet-name>myWeb</servlet-name>
<!--        使用框架的时候，url-pattern可以使用两种方式-->
<!--        1. 使用扩展名， 使用*.xx , xxx是自定义的扩展名。-->
<!--        常用*.do 等等
            2. 使用斜杠 */
-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>